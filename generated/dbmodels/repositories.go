// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Repository is an object representing the database table.
type Repository struct {
	RepositoryID int    `boil:"repository_id" json:"repository_id" toml:"repository_id" yaml:"repository_id"`
	Type         string `boil:"type" json:"type" toml:"type" yaml:"type"`
	URL          string `boil:"url" json:"url" toml:"url" yaml:"url"`

	R *repositoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L repositoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RepositoryColumns = struct {
	RepositoryID string
	Type         string
	URL          string
}{
	RepositoryID: "repository_id",
	Type:         "type",
	URL:          "url",
}

// repositoryR is where relationships are stored.
type repositoryR struct {
	Packages  PackageSlice
	Revisions RevisionSlice
}

// repositoryL is where Load methods for each relationship are stored.
type repositoryL struct{}

var (
	repositoryColumns               = []string{"repository_id", "type", "url"}
	repositoryColumnsWithoutDefault = []string{"type", "url"}
	repositoryColumnsWithDefault    = []string{"repository_id"}
	repositoryPrimaryKeyColumns     = []string{"repository_id"}
)

type (
	// RepositorySlice is an alias for a slice of pointers to Repository.
	// This should generally be used opposed to []Repository.
	RepositorySlice []*Repository
	// RepositoryHook is the signature for custom Repository hook methods
	RepositoryHook func(boil.Executor, *Repository) error

	repositoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	repositoryType                 = reflect.TypeOf(&Repository{})
	repositoryMapping              = queries.MakeStructMapping(repositoryType)
	repositoryPrimaryKeyMapping, _ = queries.BindMapping(repositoryType, repositoryMapping, repositoryPrimaryKeyColumns)
	repositoryInsertCacheMut       sync.RWMutex
	repositoryInsertCache          = make(map[string]insertCache)
	repositoryUpdateCacheMut       sync.RWMutex
	repositoryUpdateCache          = make(map[string]updateCache)
	repositoryUpsertCacheMut       sync.RWMutex
	repositoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var repositoryBeforeInsertHooks []RepositoryHook
var repositoryBeforeUpdateHooks []RepositoryHook
var repositoryBeforeDeleteHooks []RepositoryHook
var repositoryBeforeUpsertHooks []RepositoryHook

var repositoryAfterInsertHooks []RepositoryHook
var repositoryAfterSelectHooks []RepositoryHook
var repositoryAfterUpdateHooks []RepositoryHook
var repositoryAfterDeleteHooks []RepositoryHook
var repositoryAfterUpsertHooks []RepositoryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Repository) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range repositoryBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Repository) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range repositoryBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Repository) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range repositoryBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Repository) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range repositoryBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Repository) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range repositoryAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Repository) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range repositoryAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Repository) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range repositoryAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Repository) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range repositoryAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Repository) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range repositoryAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRepositoryHook registers your hook function for all future operations.
func AddRepositoryHook(hookPoint boil.HookPoint, repositoryHook RepositoryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		repositoryBeforeInsertHooks = append(repositoryBeforeInsertHooks, repositoryHook)
	case boil.BeforeUpdateHook:
		repositoryBeforeUpdateHooks = append(repositoryBeforeUpdateHooks, repositoryHook)
	case boil.BeforeDeleteHook:
		repositoryBeforeDeleteHooks = append(repositoryBeforeDeleteHooks, repositoryHook)
	case boil.BeforeUpsertHook:
		repositoryBeforeUpsertHooks = append(repositoryBeforeUpsertHooks, repositoryHook)
	case boil.AfterInsertHook:
		repositoryAfterInsertHooks = append(repositoryAfterInsertHooks, repositoryHook)
	case boil.AfterSelectHook:
		repositoryAfterSelectHooks = append(repositoryAfterSelectHooks, repositoryHook)
	case boil.AfterUpdateHook:
		repositoryAfterUpdateHooks = append(repositoryAfterUpdateHooks, repositoryHook)
	case boil.AfterDeleteHook:
		repositoryAfterDeleteHooks = append(repositoryAfterDeleteHooks, repositoryHook)
	case boil.AfterUpsertHook:
		repositoryAfterUpsertHooks = append(repositoryAfterUpsertHooks, repositoryHook)
	}
}

// OneP returns a single repository record from the query, and panics on error.
func (q repositoryQuery) OneP() *Repository {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single repository record from the query.
func (q repositoryQuery) One() (*Repository, error) {
	o := &Repository{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for repositories")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Repository records from the query, and panics on error.
func (q repositoryQuery) AllP() RepositorySlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Repository records from the query.
func (q repositoryQuery) All() (RepositorySlice, error) {
	var o []*Repository

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to Repository slice")
	}

	if len(repositoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Repository records in the query, and panics on error.
func (q repositoryQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Repository records in the query.
func (q repositoryQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count repositories rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q repositoryQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q repositoryQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if repositories exists")
	}

	return count > 0, nil
}

// PackagesG retrieves all the package's packages.
func (o *Repository) PackagesG(mods ...qm.QueryMod) packageQuery {
	return o.Packages(boil.GetDB(), mods...)
}

// Packages retrieves all the package's packages with an executor.
func (o *Repository) Packages(exec boil.Executor, mods ...qm.QueryMod) packageQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"packages\".\"repository_id\"=?", o.RepositoryID),
	)

	query := Packages(exec, queryMods...)
	queries.SetFrom(query.Query, "\"packages\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"packages\".*"})
	}

	return query
}

// RevisionsG retrieves all the revision's revisions.
func (o *Repository) RevisionsG(mods ...qm.QueryMod) revisionQuery {
	return o.Revisions(boil.GetDB(), mods...)
}

// Revisions retrieves all the revision's revisions with an executor.
func (o *Repository) Revisions(exec boil.Executor, mods ...qm.QueryMod) revisionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"revisions\".\"repository_id\"=?", o.RepositoryID),
	)

	query := Revisions(exec, queryMods...)
	queries.SetFrom(query.Query, "\"revisions\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"revisions\".*"})
	}

	return query
}

// LoadPackages allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (repositoryL) LoadPackages(e boil.Executor, singular bool, maybeRepository interface{}) error {
	var slice []*Repository
	var object *Repository

	count := 1
	if singular {
		object = maybeRepository.(*Repository)
	} else {
		slice = *maybeRepository.(*[]*Repository)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &repositoryR{}
		}
		args[0] = object.RepositoryID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &repositoryR{}
			}
			args[i] = obj.RepositoryID
		}
	}

	query := fmt.Sprintf(
		"select * from \"packages\" where \"repository_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load packages")
	}
	defer results.Close()

	var resultSlice []*Package
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice packages")
	}

	if len(packageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Packages = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.RepositoryID == foreign.RepositoryID {
				local.R.Packages = append(local.R.Packages, foreign)
				break
			}
		}
	}

	return nil
}

// LoadRevisions allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (repositoryL) LoadRevisions(e boil.Executor, singular bool, maybeRepository interface{}) error {
	var slice []*Repository
	var object *Repository

	count := 1
	if singular {
		object = maybeRepository.(*Repository)
	} else {
		slice = *maybeRepository.(*[]*Repository)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &repositoryR{}
		}
		args[0] = object.RepositoryID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &repositoryR{}
			}
			args[i] = obj.RepositoryID
		}
	}

	query := fmt.Sprintf(
		"select * from \"revisions\" where \"repository_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load revisions")
	}
	defer results.Close()

	var resultSlice []*Revision
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice revisions")
	}

	if len(revisionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Revisions = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.RepositoryID == foreign.RepositoryID {
				local.R.Revisions = append(local.R.Revisions, foreign)
				break
			}
		}
	}

	return nil
}

// AddPackagesG adds the given related objects to the existing relationships
// of the repository, optionally inserting them as new records.
// Appends related to o.R.Packages.
// Sets related.R.Repository appropriately.
// Uses the global database handle.
func (o *Repository) AddPackagesG(insert bool, related ...*Package) error {
	return o.AddPackages(boil.GetDB(), insert, related...)
}

// AddPackagesP adds the given related objects to the existing relationships
// of the repository, optionally inserting them as new records.
// Appends related to o.R.Packages.
// Sets related.R.Repository appropriately.
// Panics on error.
func (o *Repository) AddPackagesP(exec boil.Executor, insert bool, related ...*Package) {
	if err := o.AddPackages(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddPackagesGP adds the given related objects to the existing relationships
// of the repository, optionally inserting them as new records.
// Appends related to o.R.Packages.
// Sets related.R.Repository appropriately.
// Uses the global database handle and panics on error.
func (o *Repository) AddPackagesGP(insert bool, related ...*Package) {
	if err := o.AddPackages(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddPackages adds the given related objects to the existing relationships
// of the repository, optionally inserting them as new records.
// Appends related to o.R.Packages.
// Sets related.R.Repository appropriately.
func (o *Repository) AddPackages(exec boil.Executor, insert bool, related ...*Package) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RepositoryID = o.RepositoryID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"packages\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"repository_id"}),
				strmangle.WhereClause("\"", "\"", 2, packagePrimaryKeyColumns),
			)
			values := []interface{}{o.RepositoryID, rel.PackageID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RepositoryID = o.RepositoryID
		}
	}

	if o.R == nil {
		o.R = &repositoryR{
			Packages: related,
		}
	} else {
		o.R.Packages = append(o.R.Packages, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &packageR{
				Repository: o,
			}
		} else {
			rel.R.Repository = o
		}
	}
	return nil
}

// AddRevisionsG adds the given related objects to the existing relationships
// of the repository, optionally inserting them as new records.
// Appends related to o.R.Revisions.
// Sets related.R.Repository appropriately.
// Uses the global database handle.
func (o *Repository) AddRevisionsG(insert bool, related ...*Revision) error {
	return o.AddRevisions(boil.GetDB(), insert, related...)
}

// AddRevisionsP adds the given related objects to the existing relationships
// of the repository, optionally inserting them as new records.
// Appends related to o.R.Revisions.
// Sets related.R.Repository appropriately.
// Panics on error.
func (o *Repository) AddRevisionsP(exec boil.Executor, insert bool, related ...*Revision) {
	if err := o.AddRevisions(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddRevisionsGP adds the given related objects to the existing relationships
// of the repository, optionally inserting them as new records.
// Appends related to o.R.Revisions.
// Sets related.R.Repository appropriately.
// Uses the global database handle and panics on error.
func (o *Repository) AddRevisionsGP(insert bool, related ...*Revision) {
	if err := o.AddRevisions(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddRevisions adds the given related objects to the existing relationships
// of the repository, optionally inserting them as new records.
// Appends related to o.R.Revisions.
// Sets related.R.Repository appropriately.
func (o *Repository) AddRevisions(exec boil.Executor, insert bool, related ...*Revision) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RepositoryID = o.RepositoryID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"revisions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"repository_id"}),
				strmangle.WhereClause("\"", "\"", 2, revisionPrimaryKeyColumns),
			)
			values := []interface{}{o.RepositoryID, rel.RevisionID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RepositoryID = o.RepositoryID
		}
	}

	if o.R == nil {
		o.R = &repositoryR{
			Revisions: related,
		}
	} else {
		o.R.Revisions = append(o.R.Revisions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &revisionR{
				Repository: o,
			}
		} else {
			rel.R.Repository = o
		}
	}
	return nil
}

// RepositoriesG retrieves all records.
func RepositoriesG(mods ...qm.QueryMod) repositoryQuery {
	return Repositories(boil.GetDB(), mods...)
}

// Repositories retrieves all the records using an executor.
func Repositories(exec boil.Executor, mods ...qm.QueryMod) repositoryQuery {
	mods = append(mods, qm.From("\"repositories\""))
	return repositoryQuery{NewQuery(exec, mods...)}
}

// FindRepositoryG retrieves a single record by ID.
func FindRepositoryG(repositoryID int, selectCols ...string) (*Repository, error) {
	return FindRepository(boil.GetDB(), repositoryID, selectCols...)
}

// FindRepositoryGP retrieves a single record by ID, and panics on error.
func FindRepositoryGP(repositoryID int, selectCols ...string) *Repository {
	retobj, err := FindRepository(boil.GetDB(), repositoryID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindRepository retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRepository(exec boil.Executor, repositoryID int, selectCols ...string) (*Repository, error) {
	repositoryObj := &Repository{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"repositories\" where \"repository_id\"=$1", sel,
	)

	q := queries.Raw(exec, query, repositoryID)

	err := q.Bind(repositoryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from repositories")
	}

	return repositoryObj, nil
}

// FindRepositoryP retrieves a single record by ID with an executor, and panics on error.
func FindRepositoryP(exec boil.Executor, repositoryID int, selectCols ...string) *Repository {
	retobj, err := FindRepository(exec, repositoryID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Repository) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Repository) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Repository) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Repository) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("dbmodels: no repositories provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(repositoryColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	repositoryInsertCacheMut.RLock()
	cache, cached := repositoryInsertCache[key]
	repositoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			repositoryColumns,
			repositoryColumnsWithDefault,
			repositoryColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(repositoryType, repositoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(repositoryType, repositoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"repositories\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"repositories\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into repositories")
	}

	if !cached {
		repositoryInsertCacheMut.Lock()
		repositoryInsertCache[key] = cache
		repositoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Repository record. See Update for
// whitelist behavior description.
func (o *Repository) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Repository record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Repository) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Repository, and panics on error.
// See Update for whitelist behavior description.
func (o *Repository) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Repository.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Repository) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	repositoryUpdateCacheMut.RLock()
	cache, cached := repositoryUpdateCache[key]
	repositoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			repositoryColumns,
			repositoryPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("dbmodels: unable to update repositories, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"repositories\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, repositoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(repositoryType, repositoryMapping, append(wl, repositoryPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to update repositories row")
	}

	if !cached {
		repositoryUpdateCacheMut.Lock()
		repositoryUpdateCache[key] = cache
		repositoryUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q repositoryQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q repositoryQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to update all for repositories")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o RepositorySlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o RepositorySlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o RepositorySlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RepositorySlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), repositoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"repositories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, repositoryPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to update all in repository slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Repository) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Repository) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Repository) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Repository) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("dbmodels: no repositories provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(repositoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	repositoryUpsertCacheMut.RLock()
	cache, cached := repositoryUpsertCache[key]
	repositoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			repositoryColumns,
			repositoryColumnsWithDefault,
			repositoryColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			repositoryColumns,
			repositoryPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("dbmodels: unable to upsert repositories, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(repositoryPrimaryKeyColumns))
			copy(conflict, repositoryPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"repositories\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(repositoryType, repositoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(repositoryType, repositoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert repositories")
	}

	if !cached {
		repositoryUpsertCacheMut.Lock()
		repositoryUpsertCache[key] = cache
		repositoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Repository record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Repository) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Repository record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Repository) DeleteG() error {
	if o == nil {
		return errors.New("dbmodels: no Repository provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Repository record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Repository) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Repository record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Repository) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("dbmodels: no Repository provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), repositoryPrimaryKeyMapping)
	sql := "DELETE FROM \"repositories\" WHERE \"repository_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to delete from repositories")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q repositoryQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q repositoryQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("dbmodels: no repositoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to delete all from repositories")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o RepositorySlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o RepositorySlice) DeleteAllG() error {
	if o == nil {
		return errors.New("dbmodels: no Repository slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o RepositorySlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RepositorySlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("dbmodels: no Repository slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(repositoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), repositoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"repositories\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, repositoryPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to delete all from repository slice")
	}

	if len(repositoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Repository) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Repository) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Repository) ReloadG() error {
	if o == nil {
		return errors.New("dbmodels: no Repository provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Repository) Reload(exec boil.Executor) error {
	ret, err := FindRepository(exec, o.RepositoryID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *RepositorySlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *RepositorySlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RepositorySlice) ReloadAllG() error {
	if o == nil {
		return errors.New("dbmodels: empty RepositorySlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RepositorySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	repositories := RepositorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), repositoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"repositories\".* FROM \"repositories\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, repositoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&repositories)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in RepositorySlice")
	}

	*o = repositories

	return nil
}

// RepositoryExists checks if the Repository row exists.
func RepositoryExists(exec boil.Executor, repositoryID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"repositories\" where \"repository_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, repositoryID)
	}

	row := exec.QueryRow(sql, repositoryID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if repositories exists")
	}

	return exists, nil
}

// RepositoryExistsG checks if the Repository row exists.
func RepositoryExistsG(repositoryID int) (bool, error) {
	return RepositoryExists(boil.GetDB(), repositoryID)
}

// RepositoryExistsGP checks if the Repository row exists. Panics on error.
func RepositoryExistsGP(repositoryID int) bool {
	e, err := RepositoryExists(boil.GetDB(), repositoryID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// RepositoryExistsP checks if the Repository row exists. Panics on error.
func RepositoryExistsP(exec boil.Executor, repositoryID int) bool {
	e, err := RepositoryExists(exec, repositoryID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
