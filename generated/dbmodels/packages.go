// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// Package is an object representing the database table.
type Package struct {
	PackageID    int         `boil:"package_id" json:"package_id" toml:"package_id" yaml:"package_id"`
	ImportPath   string      `boil:"import_path" json:"import_path" toml:"import_path" yaml:"import_path"`
	RepositoryID int         `boil:"repository_id" json:"repository_id" toml:"repository_id" yaml:"repository_id"`
	RevisionID   string      `boil:"revision_id" json:"revision_id" toml:"revision_id" yaml:"revision_id"`
	Hash         string      `boil:"hash" json:"hash" toml:"hash" yaml:"hash"`
	Version      null.String `boil:"version" json:"version,omitempty" toml:"version" yaml:"version,omitempty"`
	LastUpdated  time.Time   `boil:"last_updated" json:"last_updated" toml:"last_updated" yaml:"last_updated"`
	JobID        int         `boil:"job_id" json:"job_id" toml:"job_id" yaml:"job_id"`

	R *packageR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L packageL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PackageColumns = struct {
	PackageID    string
	ImportPath   string
	RepositoryID string
	RevisionID   string
	Hash         string
	Version      string
	LastUpdated  string
	JobID        string
}{
	PackageID:    "package_id",
	ImportPath:   "import_path",
	RepositoryID: "repository_id",
	RevisionID:   "revision_id",
	Hash:         "hash",
	Version:      "version",
	LastUpdated:  "last_updated",
	JobID:        "job_id",
}

// packageR is where relationships are stored.
type packageR struct {
	Repository *Repository
	Revision   *Revision
	Job        *Job
}

// packageL is where Load methods for each relationship are stored.
type packageL struct{}

var (
	packageColumns               = []string{"package_id", "import_path", "repository_id", "revision_id", "hash", "version", "last_updated", "job_id"}
	packageColumnsWithoutDefault = []string{"import_path", "repository_id", "revision_id", "hash", "version", "last_updated", "job_id"}
	packageColumnsWithDefault    = []string{"package_id"}
	packagePrimaryKeyColumns     = []string{"package_id"}
)

type (
	// PackageSlice is an alias for a slice of pointers to Package.
	// This should generally be used opposed to []Package.
	PackageSlice []*Package
	// PackageHook is the signature for custom Package hook methods
	PackageHook func(boil.Executor, *Package) error

	packageQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	packageType                 = reflect.TypeOf(&Package{})
	packageMapping              = queries.MakeStructMapping(packageType)
	packagePrimaryKeyMapping, _ = queries.BindMapping(packageType, packageMapping, packagePrimaryKeyColumns)
	packageInsertCacheMut       sync.RWMutex
	packageInsertCache          = make(map[string]insertCache)
	packageUpdateCacheMut       sync.RWMutex
	packageUpdateCache          = make(map[string]updateCache)
	packageUpsertCacheMut       sync.RWMutex
	packageUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var packageBeforeInsertHooks []PackageHook
var packageBeforeUpdateHooks []PackageHook
var packageBeforeDeleteHooks []PackageHook
var packageBeforeUpsertHooks []PackageHook

var packageAfterInsertHooks []PackageHook
var packageAfterSelectHooks []PackageHook
var packageAfterUpdateHooks []PackageHook
var packageAfterDeleteHooks []PackageHook
var packageAfterUpsertHooks []PackageHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Package) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range packageBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Package) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range packageBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Package) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range packageBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Package) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range packageBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Package) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range packageAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Package) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range packageAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Package) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range packageAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Package) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range packageAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Package) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range packageAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPackageHook registers your hook function for all future operations.
func AddPackageHook(hookPoint boil.HookPoint, packageHook PackageHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		packageBeforeInsertHooks = append(packageBeforeInsertHooks, packageHook)
	case boil.BeforeUpdateHook:
		packageBeforeUpdateHooks = append(packageBeforeUpdateHooks, packageHook)
	case boil.BeforeDeleteHook:
		packageBeforeDeleteHooks = append(packageBeforeDeleteHooks, packageHook)
	case boil.BeforeUpsertHook:
		packageBeforeUpsertHooks = append(packageBeforeUpsertHooks, packageHook)
	case boil.AfterInsertHook:
		packageAfterInsertHooks = append(packageAfterInsertHooks, packageHook)
	case boil.AfterSelectHook:
		packageAfterSelectHooks = append(packageAfterSelectHooks, packageHook)
	case boil.AfterUpdateHook:
		packageAfterUpdateHooks = append(packageAfterUpdateHooks, packageHook)
	case boil.AfterDeleteHook:
		packageAfterDeleteHooks = append(packageAfterDeleteHooks, packageHook)
	case boil.AfterUpsertHook:
		packageAfterUpsertHooks = append(packageAfterUpsertHooks, packageHook)
	}
}

// OneP returns a single package record from the query, and panics on error.
func (q packageQuery) OneP() *Package {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single package record from the query.
func (q packageQuery) One() (*Package, error) {
	o := &Package{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for packages")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Package records from the query, and panics on error.
func (q packageQuery) AllP() PackageSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Package records from the query.
func (q packageQuery) All() (PackageSlice, error) {
	var o []*Package

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to Package slice")
	}

	if len(packageAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Package records in the query, and panics on error.
func (q packageQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Package records in the query.
func (q packageQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count packages rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q packageQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q packageQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if packages exists")
	}

	return count > 0, nil
}

// RepositoryG pointed to by the foreign key.
func (o *Package) RepositoryG(mods ...qm.QueryMod) repositoryQuery {
	return o.Repository(boil.GetDB(), mods...)
}

// Repository pointed to by the foreign key.
func (o *Package) Repository(exec boil.Executor, mods ...qm.QueryMod) repositoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("repository_id=?", o.RepositoryID),
	}

	queryMods = append(queryMods, mods...)

	query := Repositories(exec, queryMods...)
	queries.SetFrom(query.Query, "\"repositories\"")

	return query
}

// RevisionG pointed to by the foreign key.
func (o *Package) RevisionG(mods ...qm.QueryMod) revisionQuery {
	return o.Revision(boil.GetDB(), mods...)
}

// Revision pointed to by the foreign key.
func (o *Package) Revision(exec boil.Executor, mods ...qm.QueryMod) revisionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("revision_id=?", o.RevisionID),
	}

	queryMods = append(queryMods, mods...)

	query := Revisions(exec, queryMods...)
	queries.SetFrom(query.Query, "\"revisions\"")

	return query
}

// JobG pointed to by the foreign key.
func (o *Package) JobG(mods ...qm.QueryMod) jobQuery {
	return o.Job(boil.GetDB(), mods...)
}

// Job pointed to by the foreign key.
func (o *Package) Job(exec boil.Executor, mods ...qm.QueryMod) jobQuery {
	queryMods := []qm.QueryMod{
		qm.Where("job_id=?", o.JobID),
	}

	queryMods = append(queryMods, mods...)

	query := Jobs(exec, queryMods...)
	queries.SetFrom(query.Query, "\"jobs\"")

	return query
} // LoadRepository allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (packageL) LoadRepository(e boil.Executor, singular bool, maybePackage interface{}) error {
	var slice []*Package
	var object *Package

	count := 1
	if singular {
		object = maybePackage.(*Package)
	} else {
		slice = *maybePackage.(*[]*Package)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &packageR{}
		}
		args[0] = object.RepositoryID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &packageR{}
			}
			args[i] = obj.RepositoryID
		}
	}

	query := fmt.Sprintf(
		"select * from \"repositories\" where \"repository_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Repository")
	}
	defer results.Close()

	var resultSlice []*Repository
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Repository")
	}

	if len(packageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Repository = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RepositoryID == foreign.RepositoryID {
				local.R.Repository = foreign
				break
			}
		}
	}

	return nil
}

// LoadRevision allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (packageL) LoadRevision(e boil.Executor, singular bool, maybePackage interface{}) error {
	var slice []*Package
	var object *Package

	count := 1
	if singular {
		object = maybePackage.(*Package)
	} else {
		slice = *maybePackage.(*[]*Package)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &packageR{}
		}
		args[0] = object.RevisionID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &packageR{}
			}
			args[i] = obj.RevisionID
		}
	}

	query := fmt.Sprintf(
		"select * from \"revisions\" where \"revision_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Revision")
	}
	defer results.Close()

	var resultSlice []*Revision
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Revision")
	}

	if len(packageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Revision = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RevisionID == foreign.RevisionID {
				local.R.Revision = foreign
				break
			}
		}
	}

	return nil
}

// LoadJob allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (packageL) LoadJob(e boil.Executor, singular bool, maybePackage interface{}) error {
	var slice []*Package
	var object *Package

	count := 1
	if singular {
		object = maybePackage.(*Package)
	} else {
		slice = *maybePackage.(*[]*Package)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &packageR{}
		}
		args[0] = object.JobID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &packageR{}
			}
			args[i] = obj.JobID
		}
	}

	query := fmt.Sprintf(
		"select * from \"jobs\" where \"job_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Job")
	}
	defer results.Close()

	var resultSlice []*Job
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Job")
	}

	if len(packageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Job = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.JobID == foreign.JobID {
				local.R.Job = foreign
				break
			}
		}
	}

	return nil
}

// SetRepositoryG of the package to the related item.
// Sets o.R.Repository to related.
// Adds o to related.R.Packages.
// Uses the global database handle.
func (o *Package) SetRepositoryG(insert bool, related *Repository) error {
	return o.SetRepository(boil.GetDB(), insert, related)
}

// SetRepositoryP of the package to the related item.
// Sets o.R.Repository to related.
// Adds o to related.R.Packages.
// Panics on error.
func (o *Package) SetRepositoryP(exec boil.Executor, insert bool, related *Repository) {
	if err := o.SetRepository(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetRepositoryGP of the package to the related item.
// Sets o.R.Repository to related.
// Adds o to related.R.Packages.
// Uses the global database handle and panics on error.
func (o *Package) SetRepositoryGP(insert bool, related *Repository) {
	if err := o.SetRepository(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetRepository of the package to the related item.
// Sets o.R.Repository to related.
// Adds o to related.R.Packages.
func (o *Package) SetRepository(exec boil.Executor, insert bool, related *Repository) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"packages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"repository_id"}),
		strmangle.WhereClause("\"", "\"", 2, packagePrimaryKeyColumns),
	)
	values := []interface{}{related.RepositoryID, o.PackageID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RepositoryID = related.RepositoryID

	if o.R == nil {
		o.R = &packageR{
			Repository: related,
		}
	} else {
		o.R.Repository = related
	}

	if related.R == nil {
		related.R = &repositoryR{
			Packages: PackageSlice{o},
		}
	} else {
		related.R.Packages = append(related.R.Packages, o)
	}

	return nil
}

// SetRevisionG of the package to the related item.
// Sets o.R.Revision to related.
// Adds o to related.R.Packages.
// Uses the global database handle.
func (o *Package) SetRevisionG(insert bool, related *Revision) error {
	return o.SetRevision(boil.GetDB(), insert, related)
}

// SetRevisionP of the package to the related item.
// Sets o.R.Revision to related.
// Adds o to related.R.Packages.
// Panics on error.
func (o *Package) SetRevisionP(exec boil.Executor, insert bool, related *Revision) {
	if err := o.SetRevision(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetRevisionGP of the package to the related item.
// Sets o.R.Revision to related.
// Adds o to related.R.Packages.
// Uses the global database handle and panics on error.
func (o *Package) SetRevisionGP(insert bool, related *Revision) {
	if err := o.SetRevision(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetRevision of the package to the related item.
// Sets o.R.Revision to related.
// Adds o to related.R.Packages.
func (o *Package) SetRevision(exec boil.Executor, insert bool, related *Revision) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"packages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"revision_id"}),
		strmangle.WhereClause("\"", "\"", 2, packagePrimaryKeyColumns),
	)
	values := []interface{}{related.RevisionID, o.PackageID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RevisionID = related.RevisionID

	if o.R == nil {
		o.R = &packageR{
			Revision: related,
		}
	} else {
		o.R.Revision = related
	}

	if related.R == nil {
		related.R = &revisionR{
			Packages: PackageSlice{o},
		}
	} else {
		related.R.Packages = append(related.R.Packages, o)
	}

	return nil
}

// SetJobG of the package to the related item.
// Sets o.R.Job to related.
// Adds o to related.R.Packages.
// Uses the global database handle.
func (o *Package) SetJobG(insert bool, related *Job) error {
	return o.SetJob(boil.GetDB(), insert, related)
}

// SetJobP of the package to the related item.
// Sets o.R.Job to related.
// Adds o to related.R.Packages.
// Panics on error.
func (o *Package) SetJobP(exec boil.Executor, insert bool, related *Job) {
	if err := o.SetJob(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetJobGP of the package to the related item.
// Sets o.R.Job to related.
// Adds o to related.R.Packages.
// Uses the global database handle and panics on error.
func (o *Package) SetJobGP(insert bool, related *Job) {
	if err := o.SetJob(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetJob of the package to the related item.
// Sets o.R.Job to related.
// Adds o to related.R.Packages.
func (o *Package) SetJob(exec boil.Executor, insert bool, related *Job) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"packages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"job_id"}),
		strmangle.WhereClause("\"", "\"", 2, packagePrimaryKeyColumns),
	)
	values := []interface{}{related.JobID, o.PackageID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.JobID = related.JobID

	if o.R == nil {
		o.R = &packageR{
			Job: related,
		}
	} else {
		o.R.Job = related
	}

	if related.R == nil {
		related.R = &jobR{
			Packages: PackageSlice{o},
		}
	} else {
		related.R.Packages = append(related.R.Packages, o)
	}

	return nil
}

// PackagesG retrieves all records.
func PackagesG(mods ...qm.QueryMod) packageQuery {
	return Packages(boil.GetDB(), mods...)
}

// Packages retrieves all the records using an executor.
func Packages(exec boil.Executor, mods ...qm.QueryMod) packageQuery {
	mods = append(mods, qm.From("\"packages\""))
	return packageQuery{NewQuery(exec, mods...)}
}

// FindPackageG retrieves a single record by ID.
func FindPackageG(packageID int, selectCols ...string) (*Package, error) {
	return FindPackage(boil.GetDB(), packageID, selectCols...)
}

// FindPackageGP retrieves a single record by ID, and panics on error.
func FindPackageGP(packageID int, selectCols ...string) *Package {
	retobj, err := FindPackage(boil.GetDB(), packageID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindPackage retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPackage(exec boil.Executor, packageID int, selectCols ...string) (*Package, error) {
	packageObj := &Package{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"packages\" where \"package_id\"=$1", sel,
	)

	q := queries.Raw(exec, query, packageID)

	err := q.Bind(packageObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from packages")
	}

	return packageObj, nil
}

// FindPackageP retrieves a single record by ID with an executor, and panics on error.
func FindPackageP(exec boil.Executor, packageID int, selectCols ...string) *Package {
	retobj, err := FindPackage(exec, packageID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Package) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Package) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Package) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Package) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("dbmodels: no packages provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(packageColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	packageInsertCacheMut.RLock()
	cache, cached := packageInsertCache[key]
	packageInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			packageColumns,
			packageColumnsWithDefault,
			packageColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(packageType, packageMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(packageType, packageMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"packages\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"packages\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into packages")
	}

	if !cached {
		packageInsertCacheMut.Lock()
		packageInsertCache[key] = cache
		packageInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Package record. See Update for
// whitelist behavior description.
func (o *Package) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Package record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Package) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Package, and panics on error.
// See Update for whitelist behavior description.
func (o *Package) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Package.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Package) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	packageUpdateCacheMut.RLock()
	cache, cached := packageUpdateCache[key]
	packageUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			packageColumns,
			packagePrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("dbmodels: unable to update packages, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"packages\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, packagePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(packageType, packageMapping, append(wl, packagePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to update packages row")
	}

	if !cached {
		packageUpdateCacheMut.Lock()
		packageUpdateCache[key] = cache
		packageUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q packageQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q packageQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to update all for packages")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o PackageSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o PackageSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o PackageSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PackageSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), packagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"packages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, packagePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to update all in package slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Package) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Package) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Package) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Package) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("dbmodels: no packages provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(packageColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	packageUpsertCacheMut.RLock()
	cache, cached := packageUpsertCache[key]
	packageUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			packageColumns,
			packageColumnsWithDefault,
			packageColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			packageColumns,
			packagePrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("dbmodels: unable to upsert packages, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(packagePrimaryKeyColumns))
			copy(conflict, packagePrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"packages\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(packageType, packageMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(packageType, packageMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert packages")
	}

	if !cached {
		packageUpsertCacheMut.Lock()
		packageUpsertCache[key] = cache
		packageUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Package record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Package) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Package record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Package) DeleteG() error {
	if o == nil {
		return errors.New("dbmodels: no Package provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Package record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Package) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Package record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Package) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("dbmodels: no Package provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), packagePrimaryKeyMapping)
	sql := "DELETE FROM \"packages\" WHERE \"package_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to delete from packages")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q packageQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q packageQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("dbmodels: no packageQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to delete all from packages")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o PackageSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o PackageSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("dbmodels: no Package slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o PackageSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PackageSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("dbmodels: no Package slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(packageBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), packagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"packages\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, packagePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to delete all from package slice")
	}

	if len(packageAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Package) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Package) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Package) ReloadG() error {
	if o == nil {
		return errors.New("dbmodels: no Package provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Package) Reload(exec boil.Executor) error {
	ret, err := FindPackage(exec, o.PackageID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *PackageSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *PackageSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PackageSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("dbmodels: empty PackageSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PackageSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	packages := PackageSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), packagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"packages\".* FROM \"packages\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, packagePrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&packages)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in PackageSlice")
	}

	*o = packages

	return nil
}

// PackageExists checks if the Package row exists.
func PackageExists(exec boil.Executor, packageID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"packages\" where \"package_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, packageID)
	}

	row := exec.QueryRow(sql, packageID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if packages exists")
	}

	return exists, nil
}

// PackageExistsG checks if the Package row exists.
func PackageExistsG(packageID int) (bool, error) {
	return PackageExists(boil.GetDB(), packageID)
}

// PackageExistsGP checks if the Package row exists. Panics on error.
func PackageExistsGP(packageID int) bool {
	e, err := PackageExists(boil.GetDB(), packageID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// PackageExistsP checks if the Package row exists. Panics on error.
func PackageExistsP(exec boil.Executor, packageID int) bool {
	e, err := PackageExists(exec, packageID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
